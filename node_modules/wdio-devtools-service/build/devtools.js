'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _chromeRemoteInterface = require('chrome-remote-interface');

var _chromeRemoteInterface2 = _interopRequireDefault(_chromeRemoteInterface);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var DevToolsService = function () {
    function DevToolsService() {
        (0, _classCallCheck3.default)(this, DevToolsService);
    }

    (0, _createClass3.default)(DevToolsService, [{
        key: 'beforeSession',
        value: function beforeSession(_, caps) {
            if (caps.browserName !== 'chrome' || caps.version && caps.version < 63) {
                console.error('The wdio-devtools-service currently only supports Chrome version 63 and up');
            }
        }
    }, {
        key: 'before',
        value: function () {
            var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
                var _this = this;

                var _client, host, port;

                return _regenerator2.default.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                _context.next = 2;
                                return this._findChromePort();

                            case 2:
                                this.chromePort = _context.sent;
                                _context.next = 5;
                                return this._getCDPClient(this.chromePort);

                            case 5:
                                this.client = _context.sent;


                                /**
                                 * allow to easily access the CDP from the browser object
                                 */
                                browser.addCommand('cdp', function (domain, command) {
                                    var args = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

                                    if (!_this.client[domain]) {
                                        throw new Error(`Domain "${domain}" doesn't exist in the Chrome DevTools protocol`);
                                    }

                                    if (!_this.client[domain][command]) {
                                        throw new Error(`The "${domain}" domain doesn't have a method called "${command}"`);
                                    }

                                    return new _promise2.default(function (resolve, reject) {
                                        return _this.client[domain][command](args, function (err, result) {
                                            if (err) {
                                                return reject(new Error(`Chrome DevTools Error: ${result.message}`));
                                            }

                                            return resolve(result);
                                        });
                                    });
                                });

                                /**
                                 * helper method to receive Chrome remote debugging connection data to
                                 * e.g. use external tools like lighthouse
                                 */
                                _client = this.client, host = _client.host, port = _client.port;

                                browser.addCommand('cdpConnection', function () {
                                    return { host, port };
                                });

                                /**
                                 * propagate CDP events to the browser event listener
                                 */
                                this.client.on('event', function (event) {
                                    return browser.emit(event.method || 'event', event.params);
                                });

                            case 10:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            function before() {
                return _ref.apply(this, arguments);
            }

            return before;
        }()
    }, {
        key: '_findChromePort',
        value: function () {
            var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {
                return _regenerator2.default.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                _context2.prev = 0;
                                _context2.next = 3;
                                return browser.url('chrome://version');

                            case 3:
                                return _context2.abrupt('return', browser.getText('#command_line').then(function (args) {
                                    return parseInt(args.match(/--remote-debugging-port=(\d*)/)[1]);
                                }));

                            case 6:
                                _context2.prev = 6;
                                _context2.t0 = _context2['catch'](0);

                                console.log(`Could'nt connect to chrome`);

                            case 9:
                            case 'end':
                                return _context2.stop();
                        }
                    }
                }, _callee2, this, [[0, 6]]);
            }));

            function _findChromePort() {
                return _ref2.apply(this, arguments);
            }

            return _findChromePort;
        }()
    }, {
        key: '_getCDPClient',
        value: function () {
            var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(port) {
                return _regenerator2.default.wrap(function _callee3$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                return _context3.abrupt('return', new _promise2.default(function (resolve) {
                                    return (0, _chromeRemoteInterface2.default)({
                                        port,
                                        host: 'localhost',
                                        target: function target(targets) {
                                            return targets.findIndex(function (t) {
                                                return t.type === 'page';
                                            });
                                        }
                                    }, resolve);
                                }));

                            case 1:
                            case 'end':
                                return _context3.stop();
                        }
                    }
                }, _callee3, this);
            }));

            function _getCDPClient(_x2) {
                return _ref3.apply(this, arguments);
            }

            return _getCDPClient;
        }()
    }]);
    return DevToolsService;
}();

exports.default = DevToolsService;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2xpYi9kZXZ0b29scy5qcyJdLCJuYW1lcyI6WyJEZXZUb29sc1NlcnZpY2UiLCJfIiwiY2FwcyIsImJyb3dzZXJOYW1lIiwidmVyc2lvbiIsImNvbnNvbGUiLCJlcnJvciIsIl9maW5kQ2hyb21lUG9ydCIsImNocm9tZVBvcnQiLCJfZ2V0Q0RQQ2xpZW50IiwiY2xpZW50IiwiYnJvd3NlciIsImFkZENvbW1hbmQiLCJkb21haW4iLCJjb21tYW5kIiwiYXJncyIsIkVycm9yIiwicmVzb2x2ZSIsInJlamVjdCIsImVyciIsInJlc3VsdCIsIm1lc3NhZ2UiLCJob3N0IiwicG9ydCIsIm9uIiwiZXZlbnQiLCJlbWl0IiwibWV0aG9kIiwicGFyYW1zIiwidXJsIiwiZ2V0VGV4dCIsInRoZW4iLCJwYXJzZUludCIsIm1hdGNoIiwibG9nIiwidGFyZ2V0IiwidGFyZ2V0cyIsImZpbmRJbmRleCIsInQiLCJ0eXBlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOzs7Ozs7SUFFcUJBLGU7Ozs7Ozs7c0NBQ0ZDLEMsRUFBR0MsSSxFQUFNO0FBQ3BCLGdCQUFJQSxLQUFLQyxXQUFMLEtBQXFCLFFBQXJCLElBQWtDRCxLQUFLRSxPQUFMLElBQWdCRixLQUFLRSxPQUFMLEdBQWUsRUFBckUsRUFBMEU7QUFDdEVDLHdCQUFRQyxLQUFSLENBQWMsNEVBQWQ7QUFDSDtBQUNKOzs7Ozs7Ozs7Ozs7Ozt1Q0FHMkIsS0FBS0MsZUFBTCxFOzs7QUFBeEIscUNBQUtDLFU7O3VDQUNlLEtBQUtDLGFBQUwsQ0FBbUIsS0FBS0QsVUFBeEIsQzs7O0FBQXBCLHFDQUFLRSxNOzs7QUFFTDs7O0FBR0FDLHdDQUFRQyxVQUFSLENBQW1CLEtBQW5CLEVBQTBCLFVBQUNDLE1BQUQsRUFBU0MsT0FBVCxFQUFnQztBQUFBLHdDQUFkQyxJQUFjLHVFQUFQLEVBQU87O0FBQ3RELHdDQUFJLENBQUMsTUFBS0wsTUFBTCxDQUFZRyxNQUFaLENBQUwsRUFBMEI7QUFDdEIsOENBQU0sSUFBSUcsS0FBSixDQUFXLFdBQVVILE1BQU8saURBQTVCLENBQU47QUFDSDs7QUFFRCx3Q0FBSSxDQUFDLE1BQUtILE1BQUwsQ0FBWUcsTUFBWixFQUFvQkMsT0FBcEIsQ0FBTCxFQUFtQztBQUMvQiw4Q0FBTSxJQUFJRSxLQUFKLENBQVcsUUFBT0gsTUFBTywwQ0FBeUNDLE9BQVEsR0FBMUUsQ0FBTjtBQUNIOztBQUVELDJDQUFPLHNCQUFZLFVBQUNHLE9BQUQsRUFBVUMsTUFBVjtBQUFBLCtDQUFxQixNQUFLUixNQUFMLENBQVlHLE1BQVosRUFBb0JDLE9BQXBCLEVBQTZCQyxJQUE3QixFQUFtQyxVQUFDSSxHQUFELEVBQU1DLE1BQU4sRUFBaUI7QUFDeEYsZ0RBQUlELEdBQUosRUFBUztBQUNMLHVEQUFPRCxPQUFPLElBQUlGLEtBQUosQ0FBVywwQkFBeUJJLE9BQU9DLE9BQVEsRUFBbkQsQ0FBUCxDQUFQO0FBQ0g7O0FBRUQsbURBQU9KLFFBQVFHLE1BQVIsQ0FBUDtBQUNILHlDQU51QyxDQUFyQjtBQUFBLHFDQUFaLENBQVA7QUFPSCxpQ0FoQkQ7O0FBa0JBOzs7OzBDQUl1QixLQUFLVixNLEVBQXBCWSxJLFdBQUFBLEksRUFBTUMsSSxXQUFBQSxJOztBQUNkWix3Q0FBUUMsVUFBUixDQUFtQixlQUFuQixFQUFvQztBQUFBLDJDQUFPLEVBQUVVLElBQUYsRUFBUUMsSUFBUixFQUFQO0FBQUEsaUNBQXBDOztBQUVBOzs7QUFHQSxxQ0FBS2IsTUFBTCxDQUFZYyxFQUFaLENBQWUsT0FBZixFQUF3QixVQUFDQyxLQUFEO0FBQUEsMkNBQVdkLFFBQVFlLElBQVIsQ0FBYUQsTUFBTUUsTUFBTixJQUFnQixPQUE3QixFQUFzQ0YsTUFBTUcsTUFBNUMsQ0FBWDtBQUFBLGlDQUF4Qjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7dUNBS1VqQixRQUFRa0IsR0FBUixDQUFZLGtCQUFaLEM7OztrRUFDQ2xCLFFBQVFtQixPQUFSLENBQWdCLGVBQWhCLEVBQWlDQyxJQUFqQyxDQUFzQyxVQUFDaEIsSUFBRDtBQUFBLDJDQUFVaUIsU0FBU2pCLEtBQUtrQixLQUFMLENBQVcsK0JBQVgsRUFBNEMsQ0FBNUMsQ0FBVCxDQUFWO0FBQUEsaUNBQXRDLEM7Ozs7OztBQUVQNUIsd0NBQVE2QixHQUFSLENBQWEsNEJBQWI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7bUhBSWFYLEk7Ozs7O2tFQUNWLHNCQUFZLFVBQUNOLE9BQUQ7QUFBQSwyQ0FBYSxxQ0FBSTtBQUNoQ00sNENBRGdDO0FBRWhDRCw4Q0FBTSxXQUYwQjtBQUdoQ2EsZ0RBQVEsZ0JBQUNDLE9BQUQ7QUFBQSxtREFBYUEsUUFBUUMsU0FBUixDQUFrQixVQUFDQyxDQUFEO0FBQUEsdURBQU9BLEVBQUVDLElBQUYsS0FBVyxNQUFsQjtBQUFBLDZDQUFsQixDQUFiO0FBQUE7QUFId0IscUNBQUosRUFJN0J0QixPQUo2QixDQUFiO0FBQUEsaUNBQVosQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7a0JBdkRNakIsZSIsImZpbGUiOiJkZXZ0b29scy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBDRFAgZnJvbSAnY2hyb21lLXJlbW90ZS1pbnRlcmZhY2UnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERldlRvb2xzU2VydmljZSB7XG4gICAgYmVmb3JlU2Vzc2lvbiAoXywgY2Fwcykge1xuICAgICAgICBpZiAoY2Fwcy5icm93c2VyTmFtZSAhPT0gJ2Nocm9tZScgfHwgKGNhcHMudmVyc2lvbiAmJiBjYXBzLnZlcnNpb24gPCA2MykpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1RoZSB3ZGlvLWRldnRvb2xzLXNlcnZpY2UgY3VycmVudGx5IG9ubHkgc3VwcG9ydHMgQ2hyb21lIHZlcnNpb24gNjMgYW5kIHVwJylcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFzeW5jIGJlZm9yZSAoKSB7XG4gICAgICAgIHRoaXMuY2hyb21lUG9ydCA9IGF3YWl0IHRoaXMuX2ZpbmRDaHJvbWVQb3J0KClcbiAgICAgICAgdGhpcy5jbGllbnQgPSBhd2FpdCB0aGlzLl9nZXRDRFBDbGllbnQodGhpcy5jaHJvbWVQb3J0KVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBhbGxvdyB0byBlYXNpbHkgYWNjZXNzIHRoZSBDRFAgZnJvbSB0aGUgYnJvd3NlciBvYmplY3RcbiAgICAgICAgICovXG4gICAgICAgIGJyb3dzZXIuYWRkQ29tbWFuZCgnY2RwJywgKGRvbWFpbiwgY29tbWFuZCwgYXJncyA9IHt9KSA9PiB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuY2xpZW50W2RvbWFpbl0pIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYERvbWFpbiBcIiR7ZG9tYWlufVwiIGRvZXNuJ3QgZXhpc3QgaW4gdGhlIENocm9tZSBEZXZUb29scyBwcm90b2NvbGApXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghdGhpcy5jbGllbnRbZG9tYWluXVtjb21tYW5kXSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVGhlIFwiJHtkb21haW59XCIgZG9tYWluIGRvZXNuJ3QgaGF2ZSBhIG1ldGhvZCBjYWxsZWQgXCIke2NvbW1hbmR9XCJgKVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4gdGhpcy5jbGllbnRbZG9tYWluXVtjb21tYW5kXShhcmdzLCAoZXJyLCByZXN1bHQpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZWplY3QobmV3IEVycm9yKGBDaHJvbWUgRGV2VG9vbHMgRXJyb3I6ICR7cmVzdWx0Lm1lc3NhZ2V9YCkpXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUocmVzdWx0KVxuICAgICAgICAgICAgfSkpXG4gICAgICAgIH0pXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGhlbHBlciBtZXRob2QgdG8gcmVjZWl2ZSBDaHJvbWUgcmVtb3RlIGRlYnVnZ2luZyBjb25uZWN0aW9uIGRhdGEgdG9cbiAgICAgICAgICogZS5nLiB1c2UgZXh0ZXJuYWwgdG9vbHMgbGlrZSBsaWdodGhvdXNlXG4gICAgICAgICAqL1xuICAgICAgICBjb25zdCB7IGhvc3QsIHBvcnQgfSA9IHRoaXMuY2xpZW50XG4gICAgICAgIGJyb3dzZXIuYWRkQ29tbWFuZCgnY2RwQ29ubmVjdGlvbicsICgpID0+ICh7IGhvc3QsIHBvcnQgfSkpXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIHByb3BhZ2F0ZSBDRFAgZXZlbnRzIHRvIHRoZSBicm93c2VyIGV2ZW50IGxpc3RlbmVyXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmNsaWVudC5vbignZXZlbnQnLCAoZXZlbnQpID0+IGJyb3dzZXIuZW1pdChldmVudC5tZXRob2QgfHwgJ2V2ZW50JywgZXZlbnQucGFyYW1zKSlcbiAgICB9XG5cbiAgICBhc3luYyBfZmluZENocm9tZVBvcnQgKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgYXdhaXQgYnJvd3Nlci51cmwoJ2Nocm9tZTovL3ZlcnNpb24nKVxuICAgICAgICAgICAgcmV0dXJuIGJyb3dzZXIuZ2V0VGV4dCgnI2NvbW1hbmRfbGluZScpLnRoZW4oKGFyZ3MpID0+IHBhcnNlSW50KGFyZ3MubWF0Y2goLy0tcmVtb3RlLWRlYnVnZ2luZy1wb3J0PShcXGQqKS8pWzFdKSlcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgQ291bGQnbnQgY29ubmVjdCB0byBjaHJvbWVgKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgYXN5bmMgX2dldENEUENsaWVudCAocG9ydCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IENEUCh7XG4gICAgICAgICAgICBwb3J0LFxuICAgICAgICAgICAgaG9zdDogJ2xvY2FsaG9zdCcsXG4gICAgICAgICAgICB0YXJnZXQ6ICh0YXJnZXRzKSA9PiB0YXJnZXRzLmZpbmRJbmRleCgodCkgPT4gdC50eXBlID09PSAncGFnZScpXG4gICAgICAgIH0sIHJlc29sdmUpKVxuICAgIH1cbn1cbiJdfQ==